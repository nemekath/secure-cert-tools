name: Python build and security check

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Security check - Verify critical packages
      run: |
        echo "Checking for security vulnerabilities..."
        python -c "
        import importlib.metadata
        import sys
        from packaging import version
        
        # Check critical packages
        packages = {
            'pyOpenSSL': '25.1.0',
            'cryptography': '45.0.4', 
            'setuptools': '80.9.0',
            'zipp': '3.19.1'
        }
        
        for package, min_version in packages.items():
            try:
                pkg_version = importlib.metadata.version(package)
                print(f'{package}: {pkg_version}')
                if version.parse(pkg_version) < version.parse(min_version):
                    print(f'ERROR: {package} {pkg_version} is vulnerable! Minimum required: {min_version}')
                    sys.exit(1)
            except importlib.metadata.PackageNotFoundError:
                print(f'WARNING: {package} not found, skipping check')
            except Exception as e:
                print(f'ERROR: Could not check {package}: {e}')
                sys.exit(1)
        
        print('✅ All security-critical packages are up to date')
        "
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 120 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
    
    - name: Test with pytest - Full Test Suite
      run: |
        echo "Running comprehensive test suite..."
        python run_comprehensive_tests.py
        echo "✅ All tests completed"
    
    - name: Validate Test Coverage and Count
      run: |
        echo "🔍 Validating test coverage and count..."
        python scripts/validate_tests.py
    
    - name: Test validation congruence
      run: |
        echo "Testing frontend-backend validation congruence..."
        python -c "
        from csr import CsrGenerator
        
        # Test cases
        test_cases = [
            ('*.example.com', True),
            ('api.example.com', True),
            ('invalid..domain', False),
            ('*.', False)
        ]
        
        # Create a temporary instance for validation testing
        temp_csr = CsrGenerator({'CN': 'test.example.com', 'C': 'US'})
        
        for domain, should_match in test_cases:
            try:
                temp_csr._validate_domain_rfc_compliance(domain)
                # If we get here, domain is valid
                if not should_match:
                    print(f'VALIDATION ERROR: {domain} should be invalid but passed validation')
                    exit(1)
            except ValueError as ve:
                # If we get here, domain is invalid
                if should_match:
                    print(f'VALIDATION ERROR: {domain} should be valid but failed validation: {str(ve)}')
                    exit(1)
        
        # Test actual CSR generation with wildcards
        csr_info = {
            'CN': 'example.com',
            'subjectAltNames': '*.example.com, api.example.com'
        }
        csr = CsrGenerator(csr_info)
        assert csr.csr is not None
        print('✅ Validation congruence tests passed')
        "
    
    - name: Docker build test
      run: |
        docker build -t csrgenerator-secure-test .
    
    - name: Docker HTTPS test
      run: |
        echo "Testing Docker container with HTTPS..."
        # Start container
        docker run -d --name csrgenerator-secure-test -p 5556:5555 csrgenerator-secure-test
        sleep 10
        
        # Test HTTPS endpoint
        curl -k -f https://localhost:5556/ --max-time 30 || {
          echo "HTTPS test failed, checking container logs:"
          docker logs csrgenerator-secure-test
          docker stop csrgenerator-secure-test
          docker rm csrgenerator-secure-test
          exit 1
        }
        
        # Test CSR generation endpoint
        curl -k -X POST https://localhost:5556/generate \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "CN=test.example.com&C=US&keyType=RSA&keySize=2048" \
          --max-time 30 -f || {
          echo "CSR generation test failed"
          docker logs csrgenerator-secure-test
          docker stop csrgenerator-secure-test
          docker rm csrgenerator-secure-test
          exit 1
        }
        
        # Cleanup
        docker stop csrgenerator-secure-test
        docker rm csrgenerator-secure-test
        echo "✅ Docker HTTPS tests passed"
